'''Цикл для добавления заголовков

Функциональность:
Запрашивает у пользователя заголовки.
Позволяет завершить ввод специальной командой или пустым вводом.
Выводит итоговый список добавленных заголовков.'''

titles=[] #список для заголовков

while True: #цикл для ввода заголовков
    title = input("Введите заголовок (введите 'стоп' или оставьте поле пустым для завершения): ")
    if title in ["", "стоп"]: #работа программы завершается если пользователь вводит "стоп" или оставляет поле пустым
        break
    if title in titles: #проверка заголовка на уникальность
        print ("Такой заголовок уже существует") #при повторении заголовка, сообщает пользователю, что такой заголовок уже есть
    else: #иначе заголовок добавляется в список заголовков
        titles.append(title)

print("Заголовки заметки:",*titles,sep='\n- ')



'''Проверка и обновление статуса заметки

Функциональность:
Показывает текущий статус заметки.
Предлагает изменить статус на один из предложенных.
Обрабатывает некорректный ввод.'''


current_status="в процессе" #текущий статус
print("Текущий стату заметки:",repr(current_status)) #вывод текущего статуса
print("Выберите новый статус заметки:","1. выполнено","2. в процессе","3. отложено",sep='\n') #выбор вариантов выбора статуса
user_status = input()

while user_status not in ["1","выполнено","2","в процессе","3","отложено"]: #проверка коректности выбора статуса
    # в случае неправильного выбора пользователю предложит заново выбрать статус
    print("Выбран некорректный статус заметки, выберите другой")
    user_status = input()

if user_status in ["1","выполнено"]: #выбор первого статуса
    print("Ваш выбор:",repr(user_status))
    print('Статус заметки успешно обновлён на: "выполнено"')
    current_status="выполнено"

elif user_status in ["2","в процессе"]: #выбор второго статуса
    print("Ваш выбор:",repr(user_status))
    print('Статус заметки успешно обновлён на: "в процессе"')
    current_status ="в процессе"

elif user_status in ["3","отложено"]: #выбор третьего статуса
    print("Ваш выбор:",repr(user_status))
    print('Статус заметки успешно обновлён на: "отложено"')
    current_status="отложено"


general_status={current_status} #сохранение статуса в словаре
print("Текущий стату заметки:",repr(*general_status))



'''Обработка дедлайнов

Функциональность:
Запрашивает дату дедлайна и сравнивает её с текущей датой.
Сообщает, истёк ли дедлайн или сколько дней осталось.
Проверяет корректность формата ввода.'''


from datetime import *

#получение и вывод сегодняшней даты в нужном формате
current_date_obj=datetime.now()
current_date = current_date_obj.strftime("%d-%m-%Y")
print("Текущая дата:",current_date)

#ввод пользователем даты дедлайна и проверка ее коректности
while True:
    try:
        issue_date_str=input("Введите дату дедлайна в формате дд-мм-гггг: ")
        issue_date_obj = datetime.strptime(issue_date_str, "%d-%m-%Y")
        break
    except:
        print("Неверный формат даты. Убедитесь, что вводите дату в формате день-месяц-год, например: 10-12-2024")

date_difference=abs((issue_date_obj-current_date_obj).days) #расчитывает разницу между датами

#проверка дедлайнов
if issue_date_str==current_date:
    print("Дедлайн сегодня!")
elif issue_date_obj<current_date_obj:
    print("Дедлайн истёк",date_difference,"день(дня) назад.")
else:
    print("До дедлайна осталось",date_difference,"дня(дней).")



'''Работа с несколькими заметками

Функциональность:
Создаёт несколько заметок через ввод данных (имя, заголовок, описание, статус, дату создания, дедлайн).
Хранит заметки в списке словарей.
Выводит список всех заметок.'''


from datetime import *

def create_note(): # функция создания заметки

    while True:#имя пользователя
        username = input("Введите имя пользователя: ")
        if not username:
            print("Имя пользователя не может быть пустым.")
            continue
        break

    while True:#заголовок заметки
        title = input("Введите заголовок заметки: ")
        if not title:
            print("Заголовок не может быть пустым.")
            continue
        break

    while True: #описание заметки
        content = input("Введите описание заметки: ")
        if not content:
            print("Описание не может быть пустым.")
            continue
        break

    while True: #статус заметки
        status = input("Введите статус заметки: ")
        if not status:
            print("Статус не может быть пустым.")
            continue
        break

    while True: # Дата создания заметки
        try:
            created_date_str = input("Введите дату создания заметки в формате дд-мм-гггг: ")
            created_date_obj = datetime.strptime(created_date_str, "%d-%m-%Y")
            break
        except:
            print("Неверный формат даты. Убедитесь, что вводите дату в формате день-месяц-год, например: 10-12-2024")

    while True:  # Дедлайн
        try:
            issue_date_str = input("Введите дату дедлайна в формате дд-мм-гггг: ")
            issue_date_obj = datetime.strptime(issue_date_str, "%d-%m-%Y")
            break
        except:
            print("Неверный формат даты. Убедитесь, что вводите дату в формате день-месяц-год, например: 10-12-2024")

    note = {  # список со всей информацией
        'Имя пользователя:': username,  # Имя пользователя
        'Заголовок:': title, # заголовок заметки
        'Описание заметки:': content,  # Описание заметки
        'Статус заметки:': status,  # Статус заметки
        'Дата создания заметки:': created_date_str,  # Дата создания заметки в формате дд-мм
        'Дата истечения заметки:': issue_date_str,  # Дата истечения заметки в формате дд-мм
    }
    return note


def title_unique(title, notes_list): #функция проверки уникальности заголовков
    for note in notes_list:
        if note['Заголовок:'] == title:
            return False
    return True


notes_list=[] #список для заметок
new_note="да"
print('Добро пожаловать в "Менеджер заметок"! Вы можете добавить новую заметку.')

while new_note=="да": # цикл добавления заметок
    while True: #проверка уникальности заголовка
        created_note=create_note()
        if title_unique(created_note['Заголовок:'], notes_list):
            notes_list.append(created_note)
            break
        else:
            print("Заметка с таким заголовком уже существует. Пожалуйста, введите другой заголовок.")

    new_note=input("Хотите добавить ещё одну заметку? (да/нет): ")
    if new_note=="нет":
        break

print("Список заметок:") #вывод списка заметок
number_=1
for i, item in enumerate(notes_list, start=1): # цикл вывода списка с заметками
    print(f"{i}. Имя пользователя: {item['Имя пользователя:']}")
    print(f"   Заголовок: {item['Заголовок:']}")
    print(f"   Описание заметки: {item['Описание заметки:']}")
    print(f"   Статус заметки: {item['Статус заметки:']}")
    print(f"   Дата создания заметки: {item['Дата создания заметки:']}")
    print(f"   Дата истечения заметки: {item['Дата истечения заметки:']}")



'''Удаление заметок

Функциональность:
Удаляет заметку по имени пользователя или заголовку.
Выводит сообщение, если заметка не найдена.
Обновляет список заметок.'''


note_1 = {'Имя:': 'Алексей','Заголовок:': 'Список покупок','Описание заметки:': 'Купить продукты на неделю'}
note_2 = {'Имя:': 'Мария','Заголовок:': 'Учеба','Описание заметки:': 'Подготовиться к экзамену'}
note_3 = {'Имя:': 'Алексей', 'Заголовок:': 'Встреча', 'Описание заметки:': 'Встретиться с другом'}
notes_list = [note_1,note_2,note_3] #список словарей заметок
start_len=len(notes_list)

if not notes_list:    #вывод списка заметок
    print("Список заметок пуст.")
else:
    print("Текущие заметки:")
    number_ = 1
    for i, item in enumerate(notes_list, start=1):#цикл вывода списка с заметками
        print(f"{i}. Имя: {item['Имя:']}")
        print(f"   Заголовок: {item['Заголовок:']}")
        print(f"   Описание: {item['Описание заметки:']}")
        print("")

delete_criteria = input("Введите имя пользователя или заголовок для удаления заметки: ").lower()
index = 0
while index < len(notes_list): #цикл перебирающий список в поисках нужного критерия
    if delete_criteria in notes_list[index]['Имя:'].lower() or delete_criteria in notes_list[index]['Заголовок:'].lower():
        print("Заметка с выбранным критерием существует:",'\n',notes_list[index])
        if input("Вы уверены, что хотите удалить заметку? (да/нет) ")=="да":
            del notes_list[index] #если нужный критерий найден словарь удаляется из списка
        else:
            index += 1  # иначе проверяется следующий элемент
    else:
        index += 1 #иначе проверяется следующий элемент

if len(notes_list) < start_len: #если длина списка уменьшилась значит произошло удаление
    print("Успешно удалено. Остались следующие заметки:")
    if not notes_list: #если список пуст все заметки удалены
        print("Список заметок пуст.")
    else: # иначе выводятся имеющиеся заметки
        for i, item in enumerate(notes_list, start=1):
            print(f"{i}. Имя: {item['Имя:']}")
            print(f"   Заголовок: {item['Заголовок:']}")
            print(f"   Описание: {item['Описание заметки:']}")
            print("")
else: #если длина списка не изменилась значит необходый критерий не найден
    print("Заметок с таким именем пользователя или заголовком не найдено.")